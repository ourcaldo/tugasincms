Just install the depedencies, cp .env.example to .env and start the app frontend and backend. Don't do anything further

I need you to deep dive into this project before you do enhancement, code changes or anything that I ask you to do.

Then, I need you to enhance/fix this:

In the sign-in/login/sign-up page, you're now use this format url "https://d253284e-12f0-4558-bb54-6835f54e9144-00-1jcs9du98jns3.riker.replit.dev/sign-in%3Fredirect_url=https%3A%2F%2Fd253284e-12f0-4558-bb54-6835f54e9144-00-1jcs9du98jns3.riker.replit.dev%2F" which sometime it's givin 404 not found, so i need you to just use the url and the path /sign-in or /sign-up, without the redirect url.
In CMS, enhance the search feature, so I can search the article with their title
In CMS, enhance by adding feature of checkbox and check all, and feature to bulk delete
Add the sitemap function (please read the further information for this sitemap).
Sitemap Generation
Context
I have two different Next.js apps:

Frontend: https://domain.com → public website
CMS: https://cms.domain.com → manages content & serves API
Currently, the sitemap is generated by the frontend, but it causes random issues and is not stable.

I want to move all sitemap generation logic into the CMS so the frontend only needs to fetch or proxy the results.

Build a sitemap generation system in the CMS that:

Automatically generates sitemap files in XML format.
Saves those files (physically on disk or in object storage like S3/public folder) or redis cache
Provides an API endpoint (e.g. /api/sitemaps) that returns a JSON structure describing all available sitemaps.
Allows the frontend (domain.com) to fetch or proxy these sitemap files dynamically without needing to rebuild.
Sitemap Structure
/sitemap.xml → root sitemap index
/sitemap-pages.xml → static pages
/sitemap-blog.xml → blog sitemap index
/sitemap-blog-1.xml → first chunk of blog posts (200 URLs per file)
/sitemap-blog-2.xml → next chunk
...

CMS Responsibilities

Generate and update sitemap XML files whenever content changes (pages, blogs, etc.).
Store generated sitemap files under /public/sitemaps/ (or any accessible path).
Support automatic regeneration (e.g., when new content is published or updated, both manual or when post new content using API)
Provide an API endpoint:
GET /api/sitemaps (Don't forget authorization)

Response API
{
"sitemaps": [
{
"type": "root",
"url": "https://cms.domain.com/sitemaps/sitemap.xml"
},
{
"type": "pages",
"url": "https://cms.domain.com/sitemaps/sitemap-pages.xml"
},
{
"type": "blog",
"index": "https://cms.domain.com/sitemaps/sitemap-blog.xml",
"chunks": [
"https://cms.domain.com/sitemaps/sitemap-blog-1.xml",
"https://cms.domain.com/sitemaps/sitemap-blog-2.xml"
]
}
]
}